---
import Layout from '../../layouts/Layout.astro';
import Footer from '../../components/Footer.astro';
import Breadcrumb from '../../components/Breadcrumb.tsx';
import conceptsData from '../../data/bible-concepts.json';
import { PATHS } from '../../utils/paths';

export async function getStaticPaths() {
  return conceptsData.concepts.map((concept) => ({
    params: { conceptId: concept.id },
    props: { concept }
  }));
}

const { concept } = Astro.props;
---

<Layout title={`${concept.title} - Bible Concept`}>
  <main class="min-h-screen">
    <!-- Header Section -->
    <section class="relative overflow-hidden bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-100 py-8 md:py-16">
      <div class="absolute top-10 left-10 w-48 h-48 bg-blue-500/5 rounded-full blur-2xl"></div>
      <div class="absolute bottom-10 right-10 w-64 h-64 bg-indigo-500/5 rounded-full blur-2xl"></div>
      
      <div class="relative z-10 max-w-6xl mx-auto px-4 md:px-6">
        <!-- Breadcrumb -->
        <Breadcrumb 
          client:load 
          items={[
            { label: 'Home', href: PATHS.home() },
            { label: 'Concepts', href: PATHS.concepts() },
            { label: concept.title }
          ]} 
        />

        <!-- Concept Header -->
        <div class="text-center mb-12">
          <div class="w-20 h-20 bg-gradient-to-r from-blue-500 to-indigo-600 rounded-2xl flex items-center justify-center mx-auto mb-6">
            <svg class="w-10 h-10 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"></path>
            </svg>
          </div>
          <h1 class="text-5xl md:text-6xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-blue-600 to-indigo-700 mb-4">
            üí° {concept.title}
          </h1>
          <p class="text-xl text-gray-600 max-w-2xl mx-auto leading-relaxed">
            {concept.description}
          </p>
          
          <!-- Completion Status Indicator -->
          <div class="mt-6 flex items-center justify-center">
            {concept.detailedContent ? (
              <div class="inline-flex items-center gap-2 px-4 py-2 bg-gradient-to-r from-blue-500 to-indigo-600 text-white font-medium rounded-full shadow-lg">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                </svg>
                <span>Complete Concept</span>
              </div>
            ) : (
              <div class="inline-flex items-center gap-2 px-4 py-2 bg-gradient-to-r from-amber-500 to-orange-600 text-white font-medium rounded-full shadow-lg">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
                <span>Basic Concept - Enhanced Version Coming Soon</span>
              </div>
            )}
          </div>
        </div>
      </div>
    </section>

    <!-- Concept Content -->
    <section class="py-16 bg-white">
      <div class="max-w-6xl mx-auto px-6">
        <!-- Concept Information -->
        <div class="grid md:grid-cols-2 gap-8 mb-12">
          <!-- Concept Information -->
          <div class="bg-gradient-to-r from-gray-50 to-white rounded-2xl p-8 shadow-lg border border-gray-100">
            <h3 class="text-2xl font-bold text-gray-800 mb-6 flex items-center gap-3">
              <span class="text-2xl">‚ÑπÔ∏è</span>
              Concept Information
            </h3>
            <div class="space-y-4">
              <div>
                <span class="font-semibold text-gray-700 flex items-center gap-2">
                  <span>üè∑Ô∏è</span>
                  Category:
                </span>
                <div class="mt-2">
                  <span class="px-3 py-1 bg-blue-100 text-blue-800 text-sm rounded-full border border-blue-200">
                    {concept.category || 'General'}
                  </span>
                </div>
              </div>
              <div>
                <span class="font-semibold text-gray-700 flex items-center gap-2">
                  <span>‚≠ê</span>
                  Significance:
                </span>
                <div class="mt-2">
                  <span class="px-3 py-1 bg-green-100 text-green-800 text-sm rounded-full border border-green-200">
                    {concept.significance || 'Medium'}
                  </span>
                </div>
              </div>
              {concept.keyThemes && concept.keyThemes.length > 0 && (
                <div>
                  <span class="font-semibold text-gray-700 flex items-center gap-2">
                    <span>üéØ</span>
                    Key Themes:
                  </span>
                  <div class="mt-2 flex flex-wrap gap-2">
                    {concept.keyThemes.map((theme) => (
                      <span class="px-3 py-1 bg-purple-100 text-purple-800 text-sm rounded-full border border-purple-200">
                        {theme}
                      </span>
                    ))}
                  </div>
                </div>
              )}
            </div>
          </div>

          <!-- Application Areas -->
          <div class="bg-gradient-to-r from-blue-50 to-indigo-50 rounded-2xl p-8 shadow-lg border border-blue-200">
            <h3 class="text-2xl font-bold text-gray-800 mb-6 flex items-center gap-3">
              <span class="text-2xl">üí°</span>
              Application Areas
            </h3>
            <div class="space-y-3">
              {concept.application && concept.application.length > 0 ? (
                concept.application.map((app) => (
                  <div class="flex items-center gap-3">
                    <div class="w-2 h-2 bg-blue-500 rounded-full"></div>
                    <span class="text-gray-700">{app}</span>
                  </div>
                ))
              ) : (
                <p class="text-gray-600 italic">Application areas coming soon...</p>
              )}
            </div>
          </div>
        </div>

        {concept.detailedContent && (
          <>
            <!-- Overview Section -->
            {concept.detailedContent.overview && concept.detailedContent.overview.content && (
              <div class="mb-12">
                <h2 class="text-3xl font-bold text-gray-800 mb-8 text-center flex items-center justify-center gap-3">
                  <span class="text-3xl">üåç</span>
                  Concept Overview
                </h2>
                <div class="bg-gradient-to-r from-blue-50 to-indigo-50 rounded-2xl p-8 shadow-lg border border-blue-200">
                  <p class="text-lg text-gray-700 leading-relaxed">
                    {concept.detailedContent.overview.content}
                  </p>
                </div>
              </div>
            )}

            <!-- Dynamic Sections Renderer - handles all other sections -->
            {Object.entries(concept.detailedContent).map(([sectionKey, sectionData]) => {
              // Skip the overview section as it's already rendered above
              if (sectionKey === 'overview') return null;
              
              // Skip sections that have specific handlers below
              const handledSections = ['historicalContext', 'biblicalContext', 'spiritualMeaning', 'practicalApplications', 'challenges', 'challengesAndObstacles', 'biblicalExamples', 'modernRelevance', 'encouragementAndMotivation'];
              if (handledSections.includes(sectionKey)) return null;
              
              if (!sectionData || (typeof sectionData === 'object' && Object.keys(sectionData).length === 0)) return null;
              
              // Create section title
              const sectionTitle = sectionKey.replace(/([A-Z])/g, ' $1')
                                            .replace(/^./, str => str.toUpperCase())
                                            .trim();
              
              // Choose icon based on section name
              let icon = 'üìã';
              if (sectionKey.includes('agricultural') || sectionKey.includes('context')) icon = 'üåæ';
              else if (sectionKey.includes('sheep') || sectionKey.includes('animal')) icon = 'üêë';
              else if (sectionKey.includes('spiritual') || sectionKey.includes('parallels')) icon = '‚ú®';
              else if (sectionKey.includes('god') || sectionKey.includes('shepherd')) icon = 'üëë';
              else if (sectionKey.includes('practical') || sectionKey.includes('implications')) icon = 'üõ†Ô∏è';
              else if (sectionKey.includes('challenge') || sectionKey.includes('struggle')) icon = '‚ö†Ô∏è';
              else if (sectionKey.includes('practice') || sectionKey.includes('discipline')) icon = 'üôè';
              else if (sectionKey.includes('strategies') || sectionKey.includes('tactics')) icon = 'üéØ';
              else if (sectionKey.includes('victory') || sectionKey.includes('triumph')) icon = 'üèÜ';
              else if (sectionKey.includes('components') || sectionKey.includes('elements')) icon = 'üß©';
              else if (sectionKey.includes('qualities') || sectionKey.includes('traits')) icon = 'üíé';
              else if (sectionKey.includes('training') || sectionKey.includes('preparation')) icon = 'üèãÔ∏è';
              else if (sectionKey.includes('obstacles') || sectionKey.includes('hindrances')) icon = 'üöß';
              else if (sectionKey.includes('nature') || sectionKey.includes('fight')) icon = '‚öîÔ∏è';
              else if (sectionKey.includes('battlefield') || sectionKey.includes('arena')) icon = 'üèüÔ∏è';
              else if (sectionKey.includes('weapons') || sectionKey.includes('armor')) icon = 'üõ°Ô∏è';
              else if (sectionKey.includes('finishing') || sectionKey.includes('completion')) icon = 'üèÅ';
              else if (sectionKey.includes('rewards') || sectionKey.includes('crown')) icon = 'üëë';
              else if (sectionKey.includes('motivation') || sectionKey.includes('inspiration')) icon = 'üåü';
              else if (sectionKey.includes('community') || sectionKey.includes('aspects')) icon = 'üë•';
              
              return (
                <div class="mb-12">
                  <h2 class="text-3xl font-bold text-gray-800 mb-8 text-center flex items-center justify-center gap-3">
                    <span class="text-3xl">{icon}</span>
                    {sectionTitle}
                  </h2>
                  <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
                    {Object.entries(sectionData).map(([subKey, subData]) => {
                      if (!subData) return null;
                      
                      // Create subtitle
                      const subTitle = subKey.replace(/([A-Z])/g, ' $1')
                                             .replace(/^./, str => str.toUpperCase())
                                             .trim();
                      
                      // Handle different data types
                      let content = [];
                      if (Array.isArray(subData)) {
                        content = subData;
                      } else if (typeof subData === 'string') {
                        content = [subData];
                      } else if (typeof subData === 'object') {
                        // If it's an object, flatten it into an array
                        content = Object.values(subData).flat().filter(Boolean);
                      }
                      
                      if (content.length === 0) return null;
                      
                      return (
                        <div class="bg-gradient-to-r from-slate-50 to-gray-50 rounded-2xl p-6 shadow-lg border border-slate-200">
                          <h3 class="text-xl font-bold text-gray-800 mb-4 flex items-center gap-3">
                            <span>üìå</span>
                            {subTitle}
                          </h3>
                          <div class="space-y-3">
                            {content.map((item, idx) => (
                              <div class="flex items-start gap-3">
                                <div class="w-2 h-2 bg-slate-500 rounded-full mt-2 flex-shrink-0"></div>
                                <span class="text-gray-700">{item}</span>
                              </div>
                            ))}
                          </div>
                        </div>
                      );
                    })}
                  </div>
                </div>
              );
            })}

            <!-- Historical/Biblical Context Section -->
            {(concept.detailedContent.historicalContext || concept.detailedContent.biblicalContext) && (
              (() => {
                const contextData = concept.detailedContent.historicalContext || concept.detailedContent.biblicalContext;
                const hasContent = Object.keys(contextData).some(key => 
                  contextData[key] && 
                  ((Array.isArray(contextData[key]) && contextData[key].length > 0) || 
                   (typeof contextData[key] === 'string' && contextData[key].trim().length > 0))
                );
                
                if (!hasContent) return null;
                
                return (
                  <div class="mb-12">
                    <h2 class="text-3xl font-bold text-gray-800 mb-8 text-center flex items-center justify-center gap-3">
                      <span class="text-3xl">üìö</span>
                      {concept.detailedContent.historicalContext ? 'Historical Context' : 'Biblical Context'}
                    </h2>
                    <div class="bg-gradient-to-r from-amber-50 to-orange-50 rounded-2xl p-8 shadow-lg border border-amber-200">
                      <div class="space-y-8">
                        {Object.entries(contextData).map(([key, values]) => {
                          if (!values || (Array.isArray(values) && values.length === 0) || (typeof values === 'string' && values.trim().length === 0)) return null;
                          
                          // Create subtitle
                          const subTitle = key.replace(/([A-Z])/g, ' $1')
                                             .replace(/^./, str => str.toUpperCase())
                                             .trim();
                          
                          // Choose appropriate icon
                          let icon = 'üìñ';
                          if (key.includes('ancient') || key.includes('uses')) icon = 'üè∫';
                          else if (key.includes('cultural') || key.includes('significance')) icon = 'üèõÔ∏è';
                          else if (key.includes('agricultural') || key.includes('background')) icon = 'üåæ';
                          else if (key.includes('biblical') || key.includes('usage')) icon = 'üìñ';
                          else if (key.includes('athletic') || key.includes('imagery')) icon = 'üèÉ';
                          else if (key.includes('spiritual') || key.includes('parallels')) icon = '‚ú®';
                          
                          return (
                            <div class="border-b border-amber-200 last:border-b-0 pb-6 last:pb-0">
                              <h3 class="text-xl font-bold text-gray-800 mb-4 flex items-center gap-3">
                                <span>{icon}</span>
                                {subTitle}
                              </h3>
                              {Array.isArray(values) ? (
                                <div class="grid md:grid-cols-2 gap-4">
                                  {values.map((item) => (
                                    <div class="flex items-start gap-3">
                                      <div class="w-2 h-2 bg-amber-500 rounded-full mt-2 flex-shrink-0"></div>
                                      <span class="text-gray-700">{item}</span>
                                    </div>
                                  ))}
                                </div>
                              ) : (
                                <p class="text-gray-700 leading-relaxed">{values}</p>
                              )}
                            </div>
                          );
                        })}
                      </div>
                    </div>
                  </div>
                );
              })()
            )}

            <!-- Spiritual Meaning Section -->
            {concept.detailedContent.spiritualMeaning && (
              <div class="mb-12">
                <h2 class="text-3xl font-bold text-gray-800 mb-8 text-center flex items-center justify-center gap-3">
                  <span class="text-3xl">‚ú®</span>
                  Spiritual Meaning
                </h2>
                <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
                  {Object.entries(concept.detailedContent.spiritualMeaning).map(([key, values]) => {
                    if (!values || values.length === 0) return null;
                    
                    // Create a title from the key
                    const title = key.replace(/([A-Z])/g, ' $1')
                                     .replace(/^./, str => str.toUpperCase())
                                     .trim();
                    
                    // Choose an appropriate icon based on the key
                    let icon = 'üåü';
                    if (key.includes('preservation') || key.includes('protect')) icon = 'üõ°Ô∏è';
                    else if (key.includes('flavor') || key.includes('taste')) icon = 'üé®';
                    else if (key.includes('sowing') || key.includes('reap')) icon = 'ÔøΩ';
                    else if (key.includes('timing') || key.includes('patience')) icon = '‚è∞';
                    else if (key.includes('abundance') || key.includes('fruit')) icon = 'üçá';
                    else if (key.includes('judgment') || key.includes('reward')) icon = '‚öñÔ∏è';
                    else if (key.includes('illumination') || key.includes('light')) icon = 'üí°';
                    else if (key.includes('guidance') || key.includes('direction')) icon = 'üß≠';
                    else if (key.includes('exposure') || key.includes('truth')) icon = 'üîç';
                    else if (key.includes('witness') || key.includes('testimony')) icon = 'üì¢';
                    
                    return (
                      <div class="bg-gradient-to-r from-purple-50 to-pink-50 rounded-2xl p-6 shadow-lg border border-purple-200">
                        <h3 class="text-xl font-bold text-gray-800 mb-4 flex items-center gap-3">
                          <span>{icon}</span>
                          {title}
                        </h3>
                        <div class="space-y-3">
                          {values.map((item) => (
                            <div class="flex items-start gap-3">
                              <div class="w-2 h-2 bg-purple-500 rounded-full mt-2 flex-shrink-0"></div>
                              <span class="text-gray-700">{item}</span>
                            </div>
                          ))}
                        </div>
                      </div>
                    );
                  })}
                </div>
              </div>
            )}

            <!-- Practical Applications Section -->
            {concept.detailedContent.practicalApplications && (
              <div class="mb-12">
                <h2 class="text-3xl font-bold text-gray-800 mb-8 text-center flex items-center justify-center gap-3">
                  <span class="text-3xl">üõ†Ô∏è</span>
                  Practical Applications
                </h2>
                <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
                  {Object.entries(concept.detailedContent.practicalApplications).map(([key, values]) => {
                    if (!values || values.length === 0) return null;
                    
                    // Create a title from the key
                    const title = key.replace(/([A-Z])/g, ' $1')
                                     .replace(/^./, str => str.toUpperCase())
                                     .trim();
                    
                    // Choose an appropriate icon based on the key
                    let icon = 'üí°';
                    if (key.includes('personal') || key.includes('life')) icon = 'üë§';
                    else if (key.includes('work') || key.includes('career')) icon = 'üíº';
                    else if (key.includes('community') || key.includes('social')) icon = 'üèòÔ∏è';
                    else if (key.includes('patient') || key.includes('patience')) icon = '‚è≥';
                    else if (key.includes('preparing') || key.includes('preparation')) icon = 'üéØ';
                    else if (key.includes('timing') || key.includes('understanding')) icon = 'üß†';
                    else if (key.includes('daily') || key.includes('routine')) icon = 'üìÖ';
                    else if (key.includes('spiritual') || key.includes('discipline')) icon = 'üôè';
                    else if (key.includes('relationship') || key.includes('building')) icon = 'ü§ù';
                    
                    return (
                      <div class="bg-gradient-to-r from-green-50 to-emerald-50 rounded-2xl p-6 shadow-lg border border-green-200">
                        <h3 class="text-xl font-bold text-gray-800 mb-4 flex items-center gap-3">
                          <span>{icon}</span>
                          {title}
                        </h3>
                        <div class="space-y-3">
                          {values.map((item) => (
                            <div class="flex items-start gap-3">
                              <div class="w-2 h-2 bg-green-500 rounded-full mt-2 flex-shrink-0"></div>
                              <span class="text-gray-700">{item}</span>
                            </div>
                          ))}
                        </div>
                      </div>
                    );
                  })}
                </div>
              </div>
            )}

            <!-- Challenges Section -->
            {(concept.detailedContent.challenges || concept.detailedContent.challengesAndObstacles) && (
              <div class="mb-12">
                <h2 class="text-3xl font-bold text-gray-800 mb-8 text-center flex items-center justify-center gap-3">
                  <span class="text-3xl">‚ö†Ô∏è</span>
                  Challenges & Obstacles
                </h2>
                <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
                  {Object.entries(concept.detailedContent.challenges || concept.detailedContent.challengesAndObstacles).map(([key, values]) => {
                    if (!values || values.length === 0) return null;
                    
                    // Create a title from the key
                    const title = key.replace(/([A-Z])/g, ' $1')
                                     .replace(/^./, str => str.toUpperCase())
                                     .trim();
                    
                    // Choose an appropriate icon based on the key
                    let icon = '‚ö†Ô∏è';
                    if (key.includes('losing') || key.includes('prevention')) icon = 'üî¥';
                    else if (key.includes('impatience') || key.includes('patience')) icon = '‚è∞';
                    else if (key.includes('discouragement') || key.includes('discourage')) icon = 'üòî';
                    else if (key.includes('unrealistic') || key.includes('expectations')) icon = 'üéØ';
                    else if (key.includes('external') || key.includes('opposition')) icon = 'üèîÔ∏è';
                    else if (key.includes('internal') || key.includes('struggle')) icon = 'üí≠';
                    else if (key.includes('spiritual') || key.includes('attack')) icon = '‚öîÔ∏è';
                    
                    return (
                      <div class="bg-gradient-to-r from-red-50 to-pink-50 rounded-2xl p-6 shadow-lg border border-red-200">
                        <h3 class="text-xl font-bold text-gray-800 mb-4 flex items-center gap-3">
                          <span>{icon}</span>
                          {title}
                        </h3>
                        <div class="space-y-3">
                          {values.map((item) => (
                            <div class="flex items-start gap-3">
                              <div class="w-2 h-2 bg-red-500 rounded-full mt-2 flex-shrink-0"></div>
                              <span class="text-gray-700">{item}</span>
                            </div>
                          ))}
                        </div>
                      </div>
                    );
                  })}
                </div>
              </div>
            )}

            <!-- Biblical Examples Section -->
            {concept.detailedContent.biblicalExamples && (
              <div class="mb-12">
                <h2 class="text-3xl font-bold text-gray-800 mb-8 text-center flex items-center justify-center gap-3">
                  <span class="text-3xl">üìñ</span>
                  Biblical Examples
                </h2>
                <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
                  {Object.entries(concept.detailedContent.biblicalExamples).map(([key, values]) => {
                    if (!values || values.length === 0) return null;
                    
                    // Create a title from the key
                    const title = key.replace(/([A-Z])/g, ' $1')
                                     .replace(/^./, str => str.toUpperCase())
                                     .trim();
                    
                    // Choose an appropriate icon and color based on the key
                    let icon = 'üìñ';
                    let bgColor = 'from-emerald-50 to-teal-50';
                    let borderColor = 'border-emerald-200';
                    let dotColor = 'bg-emerald-500';
                    
                    if (key.includes('positive') || key.includes('faithful')) {
                      icon = '‚úÖ';
                      bgColor = 'from-emerald-50 to-teal-50';
                      borderColor = 'border-emerald-200';
                      dotColor = 'bg-emerald-500';
                    } else if (key.includes('negative') || key.includes('warning')) {
                      icon = '‚ùå';
                      bgColor = 'from-red-50 to-pink-50';
                      borderColor = 'border-red-200';
                      dotColor = 'bg-red-500';
                    } else if (key.includes('old') || key.includes('testament')) {
                      icon = 'üìú';
                      bgColor = 'from-amber-50 to-orange-50';
                      borderColor = 'border-amber-200';
                      dotColor = 'bg-amber-500';
                    } else if (key.includes('new') || key.includes('testament')) {
                      icon = '‚ú®';
                      bgColor = 'from-blue-50 to-indigo-50';
                      borderColor = 'border-blue-200';
                      dotColor = 'bg-blue-500';
                    }
                    
                    return (
                      <div class={`bg-gradient-to-r ${bgColor} rounded-2xl p-6 shadow-lg border ${borderColor}`}>
                        <h3 class="text-xl font-bold text-gray-800 mb-4 flex items-center gap-3">
                          <span>{icon}</span>
                          {title}
                        </h3>
                        <div class="space-y-3">
                          {values.map((example) => (
                            <div class="flex items-start gap-3">
                              <div class={`w-2 h-2 ${dotColor} rounded-full mt-2 flex-shrink-0`}></div>
                              <span class="text-gray-700">{example}</span>
                            </div>
                          ))}
                        </div>
                      </div>
                    );
                  })}
                </div>
              </div>
            )}

            <!-- Modern Relevance Section -->
            {concept.detailedContent.modernRelevance && (
              <div class="mb-12">
                <h2 class="text-3xl font-bold text-gray-800 mb-8 text-center flex items-center justify-center gap-3">
                  <span class="text-3xl">üåç</span>
                  Modern Relevance
                </h2>
                <div class="bg-gradient-to-r from-sky-50 to-blue-50 rounded-2xl p-8 shadow-lg border border-sky-200">
                  <div class="space-y-8">
                    {Object.entries(concept.detailedContent.modernRelevance).map(([key, values]) => {
                      if (!values || values.length === 0) return null;
                      
                      // Create a title from the key
                      const title = key.replace(/([A-Z])/g, ' $1')
                                       .replace(/^./, str => str.toUpperCase())
                                       .trim();
                      
                      // Choose an appropriate icon based on the key
                      let icon = 'üåç';
                      if (key.includes('today') || key.includes('current')) icon = 'üì±';
                      else if (key.includes('future') || key.includes('implications')) icon = 'üöÄ';
                      else if (key.includes('instant') || key.includes('gratification')) icon = '‚ö°';
                      else if (key.includes('spiritual') || key.includes('investment')) icon = 'üíé';
                      else if (key.includes('ministry') || key.includes('effectiveness')) icon = '‚õ™';
                      else if (key.includes('technology') || key.includes('digital')) icon = 'üíª';
                      else if (key.includes('entertainment') || key.includes('media')) icon = 'üé¨';
                      else if (key.includes('workplace') || key.includes('work')) icon = 'üíº';
                      else if (key.includes('relationship') || key.includes('social')) icon = 'ü§ù';
                      
                      return (
                        <div class="border-b border-sky-200 last:border-b-0 pb-6 last:pb-0">
                          <h3 class="text-xl font-bold text-gray-800 mb-4 flex items-center gap-3">
                            <span class="text-2xl">{icon}</span>
                            {title}
                          </h3>
                          <div class="grid md:grid-cols-2 gap-4">
                            {values.map((item) => (
                              <div class="flex items-start gap-3">
                                <div class="w-2 h-2 bg-sky-500 rounded-full mt-2 flex-shrink-0"></div>
                                <span class="text-gray-700">{item}</span>
                              </div>
                            ))}
                          </div>
                        </div>
                      );
                    })}
                  </div>
                </div>
              </div>
            )}

            <!-- Encouragement and Motivation Section -->
            {concept.detailedContent.encouragementAndMotivation && (
              <div class="mb-12">
                <h2 class="text-3xl font-bold text-gray-800 mb-8 text-center flex items-center justify-center gap-3">
                  <span class="text-3xl">üí™</span>
                  Encouragement & Motivation
                </h2>
                <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
                  {Object.entries(concept.detailedContent.encouragementAndMotivation).map(([key, values]) => {
                    if (!values || values.length === 0) return null;
                    
                    // Create a title from the key
                    const title = key.replace(/([A-Z])/g, ' $1')
                                     .replace(/^./, str => str.toUpperCase())
                                     .trim();
                    
                    // Choose an appropriate icon based on the key
                    let icon = 'üí™';
                    if (key.includes('god') || key.includes('promise')) icon = 'ü§ù';
                    else if (key.includes('eternal') || key.includes('perspective')) icon = '‚≠ê';
                    else if (key.includes('immediate') || key.includes('benefits')) icon = 'üéÅ';
                    else if (key.includes('presence') || key.includes('comfort')) icon = 'ü§ó';
                    else if (key.includes('reward') || key.includes('inheritance')) icon = 'üëë';
                    
                    return (
                      <div class="bg-gradient-to-r from-yellow-50 to-amber-50 rounded-2xl p-6 shadow-lg border border-yellow-200">
                        <h3 class="text-xl font-bold text-gray-800 mb-4 flex items-center gap-3">
                          <span>{icon}</span>
                          {title}
                        </h3>
                        <div class="space-y-3">
                          {values.map((item) => (
                            <div class="flex items-start gap-3">
                              <div class="w-2 h-2 bg-yellow-500 rounded-full mt-2 flex-shrink-0"></div>
                              <span class="text-gray-700">{item}</span>
                            </div>
                          ))}
                        </div>
                      </div>
                    );
                  })}
                </div>
              </div>
            )}
          </>
        )}

        <!-- Key Verses Section (outside detailedContent) -->
        {concept.verses && concept.verses.length > 0 && (
          <div class="mb-12">
            <h2 class="text-3xl font-bold text-gray-800 mb-8 text-center flex items-center justify-center gap-3">
              <span class="text-3xl">üìñ</span>
              Key Verses
            </h2>
            <div class="space-y-8">
              {concept.verses.map((verse, index) => (
                <div class="bg-gradient-to-r from-indigo-50 to-purple-50 rounded-2xl p-8 shadow-lg border border-indigo-200">
                  <div class="mb-6">
                    <h3 class="text-xl font-bold text-indigo-800 mb-3 flex items-center gap-3">
                      <span>üìú</span>
                      {verse.reference}
                    </h3>
                    <blockquote class="text-lg text-gray-700 italic leading-relaxed pl-4 border-l-4 border-indigo-300">
                      "{verse.text}"
                    </blockquote>
                  </div>
                  
                  {verse.historicalContext && (
                    <div class="mb-6">
                      <h4 class="text-lg font-semibold text-gray-800 mb-3 flex items-center gap-2">
                        <span>üèõÔ∏è</span>
                        Historical Context
                      </h4>
                      <div class="grid md:grid-cols-2 gap-4">
                        {Object.entries(verse.historicalContext).map(([key, value]) => (
                          <div class="bg-white rounded-lg p-4 shadow-sm border border-indigo-100">
                            <span class="font-medium text-indigo-700 capitalize">
                              {key.replace(/([A-Z])/g, ' $1').trim()}:
                            </span>
                            <p class="text-gray-700 mt-1">{value}</p>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                  
                  {verse.theologicalInsights && (
                    <div>
                      <h4 class="text-lg font-semibold text-gray-800 mb-3 flex items-center gap-2">
                        <span>‚ú®</span>
                        Theological Insights
                      </h4>
                      <div class="grid md:grid-cols-2 gap-4">
                        {Object.entries(verse.theologicalInsights).map(([key, value]) => (
                          <div class="bg-white rounded-lg p-4 shadow-sm border border-indigo-100">
                            <span class="font-medium text-indigo-700 capitalize">
                              {key.replace(/([A-Z])/g, ' $1').trim()}:
                            </span>
                            <p class="text-gray-700 mt-1">{value}</p>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
              ))}
            </div>
          </div>
        )}

        <!-- Prayer Section (outside detailedContent) -->
        {concept.prayer && concept.prayer.length > 0 && (
          <div class="mb-12">
            <h2 class="text-3xl font-bold text-gray-800 mb-8 text-center flex items-center justify-center gap-3">
              <span class="text-3xl">üôè</span>
              Prayer
            </h2>
            <div class="bg-gradient-to-r from-rose-50 to-pink-50 rounded-2xl p-8 shadow-lg border border-rose-200">
              <div class="max-w-2xl mx-auto">
                <div class="text-center mb-6">
                  <div class="w-16 h-16 bg-gradient-to-r from-rose-500 to-pink-600 rounded-full flex items-center justify-center mx-auto mb-4">
                    <svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"></path>
                    </svg>
                  </div>
                  <h3 class="text-xl font-bold text-rose-800">A Prayer for This Concept</h3>
                </div>
                <div class="space-y-4">
                  {concept.prayer.map((line, index) => (
                    <p class="text-lg text-gray-700 leading-relaxed text-center italic">
                      {line}
                    </p>
                  ))}
                </div>
              </div>
            </div>
          </div>
        )}

        {!concept.detailedContent && (
          <div class="text-center py-16">
            <div class="bg-gradient-to-r from-amber-50 to-orange-50 rounded-2xl p-8 border border-amber-200">
              <h2 class="text-3xl font-bold text-amber-800 mb-4">Enhanced Content Coming Soon</h2>
              <p class="text-lg text-amber-700 mb-6">
                We're working on expanding this concept with detailed explanations, practical applications, and biblical examples.
              </p>
              <div class="inline-flex items-center gap-2 px-4 py-2 bg-amber-100 text-amber-800 rounded-full">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
                <span>Check back soon for updates!</span>
              </div>
            </div>
          </div>
        )}
      </div>
    </section>
  </main>
  
  <Footer />
</Layout>
