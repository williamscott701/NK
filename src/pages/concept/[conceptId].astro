---
import Layout from '../../layouts/Layout.astro';
import Breadcrumb from '../../components/Breadcrumb.tsx';
import DataTable from '../../components/DataTable.astro';
import conceptsData from '../../data/bible-concepts.json';

export async function getStaticPaths() {
  return conceptsData.concepts.map((concept) => ({
    params: { conceptId: concept.id },
    props: { concept }
  }));
}

const { concept } = Astro.props;

// For now, we'll work with the basic concept data from JSON
// The detailed markdown content can be added later when the import issue is resolved
let parsedContent = null;

// Helper function to parse markdown sections (placeholder for future use)
function parseMarkdownSection(content, sectionName) {
  return null; // Placeholder
}

// Helper function to parse lists (placeholder for future use)
function parseList(content, startIndex) {
  return { list: [], endIndex: startIndex }; // Placeholder
}
---

<Layout title={`${concept.title} - Bible Concept`}>
  <main class="min-h-screen">
    <!-- Header Section -->
    <section class="relative overflow-hidden bg-gradient-to-br from-amber-50 via-yellow-50 to-orange-100 py-16">
      <div class="absolute top-10 left-10 w-48 h-48 bg-bible-gold/5 rounded-full blur-2xl"></div>
      <div class="absolute bottom-10 right-10 w-64 h-64 bg-bible-gold/5 rounded-full blur-2xl"></div>
      
      <div class="relative z-10 max-w-4xl mx-auto px-6">
        <!-- Breadcrumb -->
        <Breadcrumb 
          client:load 
          items={[
            { label: 'Home', href: '/' },
            { label: 'Concepts', href: '/concepts' },
            { label: concept.title }
          ]} 
        />

        <!-- Concept Header -->
        <div class="text-center mb-12">
          <div class="w-20 h-20 bg-gradient-to-r from-bible-gold to-amber-500 rounded-2xl flex items-center justify-center mx-auto mb-6">
            <svg class="w-10 h-10 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"></path>
            </svg>
          </div>
          <h1 class="text-5xl md:text-6xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-bible-gold to-amber-600 mb-4">
            {concept.title}
          </h1>
          <p class="text-xl text-gray-600 max-w-2xl mx-auto leading-relaxed">
            {concept.description}
          </p>
          

          
          <!-- Key Themes and Application Areas -->
          {(concept.keyThemes && concept.keyThemes.length > 0) || (concept.application && concept.application.length > 0) ? (
            <div class="mt-6 space-y-4">
              {concept.keyThemes && concept.keyThemes.length > 0 && (
                <div class="flex items-center justify-center gap-4">
                  <h3 class="text-lg font-semibold text-gray-700 whitespace-nowrap">Key Themes:</h3>
                  <div class="flex flex-wrap gap-2">
                    {concept.keyThemes.map((theme) => (
                      <span class="inline-flex items-center px-3 py-1 rounded-full text-sm bg-blue-50 text-blue-600 border border-blue-200">
                        {theme}
                      </span>
                    ))}
                  </div>
                </div>
              )}
              
              {concept.application && concept.application.length > 0 && (
                <div class="flex items-center justify-center gap-4">
                  <h3 class="text-lg font-semibold text-gray-700 whitespace-nowrap">Application Areas:</h3>
                  <div class="flex flex-wrap gap-2">
                    {concept.application.map((app) => (
                      <span class="inline-flex items-center px-3 py-1 rounded-full text-sm bg-green-50 text-green-600 border border-green-200">
                        {app}
                      </span>
                    ))}
                  </div>
                </div>
              )}
            </div>
          ) : null}
        </div>
      </div>
    </section>

    <!-- Concept Content -->
    <section class="py-16 bg-white">
      <div class="max-w-6xl mx-auto px-6">
        <div class="flex justify-center">
          <!-- Main Content Column -->
          <div class="max-w-4xl w-full space-y-12">
            
            <!-- Detailed Content -->
            {concept.detailedContent && (
              <div class="space-y-12">

                
                <!-- Table of Contents -->
                <div class="bg-gradient-to-r from-slate-50 to-gray-50 rounded-2xl p-6 border border-gray-200">
                  <h2 class="text-2xl font-bold text-gray-800 mb-4 flex items-center gap-3">
                    <svg class="w-6 h-6 text-gray-600" fill="none" stroke="currentColor" viewBiblical ContextBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 10h16M4 14h16M4 18h16"></path>
                    </svg>
                    Table of Contents
                  </h2>
                  <div class="grid md:grid-cols-2 gap-3">
                    <a 
                      href="#overview"
                      class="flex items-center gap-2 p-3 bg-white rounded-lg border border-gray-200 hover:border-blue-300 hover:bg-blue-50 transition-all duration-200 group"
                    >
                      <span class="w-2 h-2 bg-blue-400 rounded-full group-hover:bg-blue-600 transition-colors"></span>
                      <span class="text-gray-700 group-hover:text-blue-700 font-medium">Overview</span>
                    </a>
                    {concept.verses && concept.verses.length > 0 && (
                      <a 
                        href="#verse-analysis"
                        class="flex items-center gap-2 p-3 bg-white rounded-lg border border-gray-200 hover:border-blue-300 hover:bg-blue-50 transition-all duration-200 group"
                      >
                        <span class="w-2 h-2 bg-indigo-400 rounded-full group-hover:bg-indigo-600 transition-colors"></span>
                        <span class="text-gray-700 group-hover:text-indigo-700 font-medium">Verse Analysis</span>
                      </a>
                    )}
                    {Object.keys(concept.detailedContent).filter(key => key !== 'overview').map((section) => (
                      <a 
                        key={section}
                        href={`#${section}`}
                        class="flex items-center gap-2 p-3 bg-white rounded-lg border border-gray-200 hover:border-blue-300 hover:bg-blue-50 transition-all duration-200 group"
                      >
                        <span class="w-2 h-2 bg-blue-400 rounded-full group-hover:bg-blue-600 transition-colors"></span>
                        <span class="text-gray-700 group-hover:text-blue-700 font-medium capitalize">
                          {section.replace(/([A-Z])/g, ' $1').trim()}
                        </span>
                      </a>
                    ))}
                    {concept.prayer && (
                      <a 
                        href="#prayer"
                        class="flex items-center gap-2 p-3 bg-white rounded-lg border border-gray-200 hover:border-purple-300 hover:bg-purple-50 transition-all duration-200 group"
                      >
                        <span class="w-2 h-2 bg-purple-400 rounded-full group-hover:bg-purple-600 transition-colors"></span>
                        <span class="text-gray-700 group-hover:text-purple-700 font-medium">Prayer</span>
                      </a>
                    )}
                  </div>
                </div>

                <!-- Overview -->
                {concept.detailedContent.overview && concept.detailedContent.overview.content && (
                  <div id="overview" class="bg-gradient-to-r from-blue-50 to-indigo-50 rounded-2xl p-8 border border-blue-200">
                    <h2 class="text-3xl font-bold text-blue-800 mb-6 flex items-center gap-3">
                      <svg class="w-8 h-8 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                      </svg>
                      Overview
                    </h2>
                    <p class="text-lg text-blue-800 leading-relaxed">
                      {concept.detailedContent.overview.content}
                    </p>
                  </div>
                )}

                <!-- Comprehensive Verse Analysis -->
                {concept.verses && concept.verses.length > 0 && (
                  <div id="verse-analysis">
                    <h2 class="text-3xl font-bold text-indigo-800 mb-8 flex items-center gap-3">
                      <svg class="w-8 h-8 text-indigo-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                      </svg>
                      Deep Dive
                    </h2>
                    
                    <div class="space-y-8">
                      {concept.verses.map((verse, index) => (
                        <div key={index} class="bg-white rounded-2xl p-8 border border-indigo-200 shadow-sm">
                          <div class="mb-6">
                            <h3 class="text-2xl font-bold text-indigo-700 mb-3">
                              {verse.reference}
                            </h3>
                            <blockquote class="text-xl text-gray-800 leading-relaxed italic border-l-4 border-indigo-400 pl-6 mb-4">
                              "{verse.text}"
                            </blockquote>
                          </div>

                          <!-- Verse Breakdown -->
                          <div class="grid md:grid-cols-2 gap-6">
                            <!-- Historical Context -->
                            <div class="space-y-4">
                              <h4 class="text-lg font-semibold text-indigo-600 flex items-center gap-2">
                                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                </svg>
                                Historical Context
                              </h4>
                              <div class="text-sm text-gray-600 space-y-2">
                                {verse.historicalContext && Object.entries(verse.historicalContext).map(([key, value]) => (
                                  <p key={key}>
                                    <strong>{key.replace(/([A-Z])/g, ' $1').trim().replace(/^./, str => str.toUpperCase())}:</strong> {value}
                                  </p>
                                ))}
                              </div>
                            </div>

                            <!-- Theological Insights -->
                            <div class="space-y-4">
                              <h4 class="text-lg font-semibold text-indigo-600 flex items-center gap-2">
                                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"></path>
                                </svg>
                                Theological Insights
                              </h4>
                              <div class="text-sm text-gray-600 space-y-2">
                                {verse.theologicalInsights && Object.entries(verse.theologicalInsights).map(([key, value]) => (
                                  <p key={key}>
                                    <strong>{key.replace(/([A-Z])/g, ' $1').trim().replace(/^./, str => str.toUpperCase())}:</strong> {value}
                                  </p>
                                ))}
                              </div>
                            </div>
                          </div>


                        </div>
                      ))}
                    </div>
                  </div>
                )}

                <!-- Tables Section - Always displayed right after Deep Dive -->
                {concept.detailedContent && Object.entries(concept.detailedContent).map(([key, value]) => {
                  if (value && typeof value === 'object' && 'title' in value && 'headers' in value && 'rows' in value) {
                    return (
                      <div key={key} id={key} class="mb-8">
                        <DataTable 
                          title={value.title}
                          headers={value.headers}
                          rows={value.rows}
                        />
                      </div>
                    );
                  }
                  return null;
                })}

                <!-- Biblical Context -->
                {concept.detailedContent.biblicalContext && (
                  <div id="biblicalContext" class="bg-gradient-to-r from-green-50 to-emerald-50 rounded-2xl p-8 border border-green-200">
                    <h2 class="text-3xl font-bold text-green-800 mb-6 flex items-center gap-3">
                      <svg class="w-8 h-8 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"></path>
                      </svg>
                      Biblical Context
                    </h2>
                    <div class="space-y-6">
                      {Object.entries(concept.detailedContent.biblicalContext).map(([key, value]) => (
                        <div key={key}>
                          <h3 class="text-xl font-semibold text-green-700 mb-3 capitalize">
                            {key.replace(/([A-Z])/g, ' $1').trim()}
                          </h3>
                          {Array.isArray(value) ? (
                            <ul class="list-disc list-inside space-y-2 text-green-700">
                              {value.map((item, index) => (
                                <li key={index} class="leading-relaxed">{item}</li>
                              ))}
                            </ul>
                          ) : (
                            <p class="text-green-700 leading-relaxed">{value}</p>
                          )}
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                <!-- Spiritual Meaning -->
                {concept.detailedContent.spiritualMeaning && (
                  <div id="spiritualMeaning" class="bg-gradient-to-r from-purple-50 to-violet-50 rounded-2xl p-8 border border-purple-200">
                    <h2 class="text-3xl font-bold text-purple-800 mb-6 flex items-center gap-3">
                      <svg class="w-8 h-8 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"></path>
                      </svg>
                      Spiritual Meaning
                    </h2>
                    <div class="space-y-6">
                      {Object.entries(concept.detailedContent.spiritualMeaning).map(([key, value]) => (
                        <div key={key}>
                          <h3 class="text-xl font-semibold text-purple-700 mb-3 capitalize">
                            {key.replace(/([A-Z])/g, ' $1').trim()}
                          </h3>
                          {Array.isArray(value) ? (
                            <ul class="list-disc list-inside space-y-2 text-purple-700">
                              {value.map((item, index) => (
                                <li key={index} class="leading-relaxed">{item}</li>
                              ))}
                            </ul>
                          ) : (
                            <p class="text-purple-700 leading-relaxed">{value}</p>
                          )}
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                <!-- Practical Applications -->
                {concept.detailedContent.practicalApplications && (
                  <div id="practicalApplications" class="bg-gradient-to-r from-orange-50 to-red-50 rounded-2xl p-8 border border-orange-200">
                    <h2 class="text-3xl font-bold text-orange-800 mb-6 flex items-center gap-3">
                      <svg class="w-8 h-8 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                      </svg>
                      Practical Applications
                    </h2>
                    <div class="space-y-6">
                      {Object.entries(concept.detailedContent.practicalApplications).map(([key, value]) => (
                        <div key={key}>
                          <h3 class="text-xl font-semibold text-orange-700 mb-3 capitalize">
                            {key.replace(/([A-Z])/g, ' $1').trim()}
                          </h3>
                          {Array.isArray(value) ? (
                            <ul class="list-disc list-inside space-y-2 text-orange-700">
                              {value.map((item, index) => (
                                <li key={index} class="leading-relaxed">{item}</li>
                              ))}
                            </ul>
                          ) : (
                            <p class="text-orange-700 leading-relaxed">{value}</p>
                          )}
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                <!-- Biblical Examples -->
                {concept.detailedContent.biblicalExamples && (
                  <div id="biblicalExamples" class="bg-gradient-to-r from-amber-50 to-yellow-50 rounded-2xl p-8 border border-amber-200">
                    <h2 class="text-3xl font-bold text-amber-800 mb-6 flex items-center gap-3">
                      <svg class="w-8 h-8 text-amber-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 20H5a2 2 0 01-2-2V6a2 2 0 012-2h10a2 2 0 012 2v1m2 13a2 2 0 01-2-2V7m2 13a2 2 0 002-2V9a2 2 0 00-2-2h-2m-4-3H9M7 16h6M7 8h6v4H7V8z"></path>
                      </svg>
                      Biblical Examples
                    </h2>
                    <div class="space-y-6">
                      {Object.entries(concept.detailedContent.biblicalExamples).map(([key, value]) => (
                        <div key={key}>
                          <h3 class="text-xl font-semibold text-amber-700 mb-3 capitalize">
                            {key.replace(/([A-Z])/g, ' $1').trim()}
                          </h3>
                          {Array.isArray(value) ? (
                            <ul class="list-disc list-inside space-y-2 text-amber-700">
                              {value.map((item, index) => (
                                <li key={index} class="leading-relaxed">{item}</li>
                              ))}
                            </ul>
                          ) : (
                            <p class="text-amber-700 leading-relaxed">{value}</p>
                          )}
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                <!-- Modern Applications -->
                {concept.detailedContent.modernApplications && (
                  <div id="modernApplications" class="bg-gradient-to-r from-teal-50 to-cyan-50 rounded-2xl p-8 border border-teal-200">
                    <h2 class="text-3xl font-bold text-teal-800 mb-6 flex items-center gap-3">
                      <svg class="w-8 h-8 text-teal-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
                      </svg>
                      Modern Applications
                    </h2>
                    <div class="space-y-6">
                      {Object.entries(concept.detailedContent.modernApplications).map(([key, value]) => (
                        <div key={key}>
                          <h3 class="text-xl font-semibold text-teal-700 mb-3 capitalize">
                            {key.replace(/([A-Z])/g, ' $1').trim()}
                          </h3>
                          {Array.isArray(value) ? (
                            <ul class="list-disc list-inside space-y-2 text-teal-700">
                              {value.map((item, index) => (
                                <li key={index} class="leading-relaxed">{item}</li>
                              ))}
                            </ul>
                          ) : (
                            <p class="text-teal-700 leading-relaxed">{value}</p>
                          )}
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                <!-- Additional Sections -->
                {Object.entries(concept.detailedContent).map(([key, value]) => {
                  // Skip sections we've already handled above
                  const handledSections = ['overview', 'biblicalContext', 'spiritualMeaning', 'practicalApplications', 'biblicalExamples', 'modernApplications', 'fourTypesOfSoil', 'theSoils', 'soilPreparation'];
                  
                  // Skip table entries (they're handled separately above)
                  if (key.endsWith('Table')) return null;
                  
                  if (handledSections.includes(key)) return null;
                  

                  
                  // Special handling for componentsOfTheArmour
                  if (key === 'componentsOfTheArmour') {
                    return (
                      <div key={key} id={key} class="bg-gradient-to-r from-amber-50 to-orange-50 rounded-2xl p-8 border border-amber-200">
                        <h2 class="text-3xl font-bold text-amber-800 mb-8 flex items-center gap-3">
                          <svg class="w-8 h-8 text-amber-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                          </svg>
                          Components of the Armour
                        </h2>
                        <div class="grid md:grid-cols-2 gap-6">
                          {Object.entries(value).map(([armorPiece, armorDetails]) => (
                            <div key={armorPiece} class="bg-white rounded-xl p-6 shadow-lg border border-amber-200">
                              <h3 class="text-xl font-bold text-amber-700 mb-4 capitalize">
                                {armorPiece.replace(/([A-Z])/g, ' $1').trim()}
                              </h3>
                              <div class="space-y-4">
                                {Object.entries(armorDetails).map(([detailKey, detailValue]) => (
                                  <div key={detailKey}>
                                    <h4 class="text-lg font-semibold text-amber-600 mb-2 capitalize">
                                      {detailKey.replace(/([A-Z])/g, ' $1').trim()}
                                    </h4>
                                    {Array.isArray(detailValue) ? (
                                      <ul class="list-disc list-inside space-y-1 text-gray-600">
                                        {detailValue.map((item, index) => (
                                          <li key={index} class="leading-relaxed">{item}</li>
                                        ))}
                                      </ul>
                                    ) : (
                                      <p class="text-gray-600 leading-relaxed">{detailValue}</p>
                                    )}
                                  </div>
                                ))}
                              </div>
                            </div>
                          ))}
                        </div>
                      </div>
                    );
                  }
                  
                  return (
                    <div key={key} id={key} class="bg-gradient-to-r from-gray-50 to-slate-50 rounded-2xl p-8 border border-gray-200">
                      <h2 class="text-3xl font-bold text-gray-800 mb-6 flex items-center gap-3 capitalize">
                        <svg class="w-8 h-8 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
                        </svg>
                        {key.replace(/([A-Z])/g, ' $1').trim()}
                      </h2>
                      <div class="space-y-6">
                        {typeof value === 'object' && value !== null ? (
                          Object.entries(value).map(([subKey, subValue]) => (
                            <div key={subKey}>
                              <h3 class="text-xl font-semibold text-gray-700 mb-3 capitalize">
                                {subKey.replace(/([A-Z])/g, ' $1').trim()}
                              </h3>
                              {typeof subValue === 'object' && subValue !== null && !Array.isArray(subValue) ? (
                                // Handle nested objects (like componentsOfTheArmour)
                                <div class="space-y-4">
                                  {Object.entries(subValue).map(([nestedKey, nestedValue]) => (
                                    <div key={nestedKey} class="bg-white rounded-lg p-4 border border-gray-200">
                                      <h4 class="text-lg font-medium text-gray-800 mb-2 capitalize">
                                        {nestedKey.replace(/([A-Z])/g, ' $1').trim()}
                                      </h4>
                                      {Array.isArray(nestedValue) ? (
                                        <ul class="list-disc list-inside space-y-1 text-gray-600">
                                          {nestedValue.map((item, index) => (
                                            <li key={index} class="leading-relaxed">{item}</li>
                                          ))}
                                        </ul>
                                      ) : (
                                        <p class="text-gray-600 leading-relaxed">{nestedValue}</p>
                                      )}
                                    </div>
                                  ))}
                                </div>
                              ) : Array.isArray(subValue) ? (
                                <ul class="list-disc list-inside space-y-2 text-gray-700">
                                  {subValue.map((item, index) => (
                                    <li key={index} class="leading-relaxed">{item}</li>
                                  ))}
                                </ul>
                              ) : (
                                <p class="text-gray-700 leading-relaxed">{subValue}</p>
                              )}
                            </div>
                          ))
                        ) : (
                          <p class="text-gray-700 leading-relaxed">{value}</p>
                        )}
                      </div>
                    </div>
                  );
                })}
              </div>
            )}
            


            <!-- Content Development Note (fallback) -->
            {!concept.detailedContent && (
              <div class="bg-gradient-to-r from-yellow-50 to-orange-50 rounded-2xl p-8 border border-yellow-200">
                <h2 class="text-3xl font-bold text-yellow-800 mb-6 flex items-center gap-3">
                  <svg class="w-8 h-8 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                  </svg>
                  Content Development Note
                </h2>
                <p class="text-yellow-800 mb-4">
                  This concept page is currently displaying basic information. Detailed content including Biblical Context, Theological Depth, and Practical Applications is being developed and will be available soon.
                </p>
                <p class="text-yellow-700 text-sm">
                  Check the <a href="/concepts" class="underline hover:text-yellow-900">concepts page</a> for updates.
                </p>
              </div>
            )}

            <!-- Prayer Section -->
            {concept.prayer && (
              <div id="prayer" class="bg-gradient-to-r from-purple-50 to-indigo-50 rounded-2xl p-8 border border-purple-200">
                <h2 class="text-3xl font-bold text-purple-800 mb-6 flex items-center gap-3">
                  <svg class="w-8 h-8 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 4V2a1 1 0 011-1h8a1 1 0 011 1v2m-9 0h10m-10 0a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V6a2 2 0 00-2-2m-5 4v2m0 4v2m0-6a2 2 0 100-4 2 2 0 000 4z"></path>
                  </svg>
                  Prayer
                </h2>
                <div class="space-y-4">
                  {Array.isArray(concept.prayer) ? (
                    concept.prayer.map((prayerLine, index) => (
                      <p key={index} class="text-purple-700 leading-relaxed text-lg">
                        {prayerLine}
                      </p>
                    ))
                  ) : (
                    <p class="text-purple-700 leading-relaxed text-lg">
                      {concept.prayer}
                    </p>
                  )}
                </div>
              </div>
            )}


          </div>

        </div>
      </div>
    </section>
  </main>

  <!-- Footer -->
  <footer class="bg-gray-900 text-white">
    <div class="max-w-7xl mx-auto px-6 py-12">
      <div class="grid md:grid-cols-4 gap-8">
        <!-- Brand Section -->
        <div class="col-span-2">
          <div class="flex items-center mb-4">
            <h3 class="text-2xl font-bold">
              <span class="text-bible-blue">Bible</span>
              <span class="text-bible-gold">Bing</span>
            </h3>
          </div>
          <p class="text-gray-300 mb-6 max-w-md">
            Discover divine wisdom with powerful tools designed to make Bible study engaging, meaningful, and accessible to everyone.
          </p>
          <div class="flex space-x-4">
            <a href="#" class="text-gray-400 hover:text-white transition-colors">
              <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
                <path d="M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z"/>
              </svg>
            </a>
            <a href="#" class="text-gray-400 hover:text-white transition-colors">
              <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
                <path d="M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z"/>
              </svg>
            </a>
            <a href="#" class="text-gray-400 hover:text-white transition-colors">
              <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
                <path d="M12 2.163c3.204 0 3.584.012 4.85.07 3.252.148 4.771 1.691 4.919 4.919.058 1.265.069 1.645.069 4.849 0 3.205-.012 3.584-.069 4.849-.149 3.225-1.664 4.771-4.919 4.919-1.266.058-1.644.07-4.85.07-3.204 0-3.584-.012-4.849-.07-3.26-.149-4.771-1.699-4.919-4.92-.058-1.265-.07-1.644-.07-4.849 0-3.204.013-3.583.07-4.849.149-3.227 1.664-4.771 4.919-4.919 1.266-.057 1.645-.069 4.849-.069zm0-2.163c-3.259 0-3.667.014-4.947.072-4.358.2-6.78 2.618-6.98 6.98-.059 1.281-.073 1.689-.073 4.948 0 3.259.014 3.668.072 4.948.2 4.358 2.618 6.78 6.98 6.98 1.281.058 1.689.072 4.948.072 3.259 0 3.668-.014 4.948-.072 4.354-.2 6.782-2.618 6.979-6.98.059-1.28.073-1.689.073-4.948 0-3.259-.014-3.667-.072-4.947-.196-4.354-2.617-6.78-6.979-6.98-1.281-.059-1.69-.073-4.949-.073zm0 5.838c-3.403 0-6.162 2.759-6.162 6.162s2.759 6.163 6.162 6.163 6.162-2.759 6.162-6.163c0-3.403-2.759-6.162-6.162-6.162zm0 10.162c-2.209 0-4-1.79-4-4 0-2.209 1.791-4 4-4s4 1.791 4 4c0 2.21-1.791 4-4 4zm6.406-11.845c-.796 0-1.441.645-1.441 1.44s.645 1.44 1.441 1.44c.795 0 1.439-.645 1.439-1.44s-.644-1.44-1.439-1.44z"/>
              </svg>
            </a>
          </div>
        </div>

        <!-- Quick Links -->
        <div>
          <h4 class="text-lg font-semibold mb-4">Quick Links</h4>
          <ul class="space-y-2">
            <li><a href="/books" class="text-gray-300 hover:text-white transition-colors">Books</a></li>
            <li><a href="/concepts" class="text-gray-300 hover:text-white transition-colors">Concepts</a></li>
            <li><a href="/stories" class="text-gray-300 hover:text-white transition-colors">Stories</a></li>
            <li><a href="#" class="text-gray-300 hover:text-white transition-colors">About</a></li>
          </ul>
        </div>

        <!-- Support -->
        <div>
          <h4 class="text-lg font-semibold mb-4">Support</h4>
          <ul class="space-y-2">
            <li><a href="#" class="text-gray-300 hover:text-white transition-colors">Help Center</a></li>
            <li><a href="#" class="text-gray-300 hover:text-white transition-colors">Contact Us</a></li>
            <li><a href="#" class="text-gray-300 hover:text-white transition-colors">Privacy Policy</a></li>
            <li><a href="#" class="text-gray-300 hover:text-white transition-colors">Terms of Service</a></li>
          </ul>
        </div>
      </div>

      <!-- Bottom Bar -->
      <div class="border-t border-gray-800 mt-12 pt-8 text-center">
        <p class="text-gray-400">
          © 2025 BibleBing. All rights reserved. Made with ❤️ for spreading divine wisdom.
        </p>
      </div>
    </div>
  </footer>
</Layout>
