---
interface Props {
  title: string;
  headers: string[];
  rows: Record<string, any>[];
}

const { title, headers, rows } = Astro.props;

// Create a mapping from header display names to possible row keys
function getCellValue(row: Record<string, any>, header: string): any {
  // Try different possible key formats
  const possibleKeys = [
    header.toLowerCase().replace(/\s+/g, ''), // "Daily Application" -> "dailyapplication"
    header.toLowerCase().replace(/\s+/g, '').replace(/[^a-z]/g, ''), // "Biblical Example" -> "biblicalexample"
    header.toLowerCase().replace(/\s+/g, '').replace(/[^a-z]/g, '').replace(/^biblical/, 'biblical'), // Keep "biblical" prefix
    header.toLowerCase().replace(/\s+/g, '').replace(/[^a-z]/g, '').replace(/^daily/, 'daily'), // Keep "daily" prefix
    header.toLowerCase().replace(/\s+/g, '').replace(/[^a-z]/g, '').replace(/^growth/, 'growth'), // Keep "growth" prefix
  ];
  
  // Also try the exact header as a key
  possibleKeys.unshift(header);
  
  for (const key of possibleKeys) {
    if (row[key] !== undefined) {
      return row[key];
    }
  }
  
  // If no exact match, try to find a key that contains the header words
  const headerWords = header.toLowerCase().split(/\s+/);
  for (const [rowKey, value] of Object.entries(row)) {
    const rowKeyLower = rowKey.toLowerCase();
    if (headerWords.some(word => rowKeyLower.includes(word))) {
      return value;
    }
  }
  
  // Last resort: return the first value or empty string
  return Object.values(row)[0] || '';
}

// Function to format header display names
function formatHeaderDisplay(header: string): string {
  if (header === 'kingdomOfLight') return 'Kingdom of Light';
  if (header === 'kingdomOfDarkness') return 'Kingdom of Darkness';
  if (header === 'biblicalReference') return 'Biblical Reference';
  if (header === 'evidenceInLife') return 'Evidence in Life';
  return header;
}

// Function to render cell content
function renderCellContent(value: any): string {
  if (Array.isArray(value)) {
    return value.map(item => `â€¢ ${item}`).join('\n');
  }
  return String(value);
}
---

<div class="mb-8">
  <h3 class="text-2xl font-bold text-gray-800 mb-6 flex items-center gap-3">
    <svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 012 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
    </svg>
    {title}
  </h3>
  
  <div class="overflow-hidden rounded-2xl border border-gray-200 bg-white shadow-lg">
    <div class="overflow-x-auto">
      <table class="w-full">
        <thead class="bg-gradient-to-r from-blue-50 to-indigo-50">
          <tr>
            {headers.map((header) => (
              <th class="px-10 py-4 text-left text-sm font-semibold text-gray-700 uppercase tracking-wider border-b border-gray-200/50 min-w-[200px]">
                {formatHeaderDisplay(header)}
              </th>
            ))}
          </tr>
        </thead>
        <tbody class="bg-white divide-y divide-gray-100">
          {rows.map((row, rowIndex) => (
            <tr class={`hover:bg-gradient-to-r hover:from-gray-50 hover:to-blue-50/30 transition-all duration-200 ${rowIndex % 2 === 0 ? 'bg-white' : 'bg-gray-50/30'}`}>
              {headers.map((header) => {
                const cellValue = getCellValue(row, header);
                const isArray = Array.isArray(cellValue);
                return (
                  <td class={`px-10 py-5 text-sm text-gray-700 ${isArray ? 'whitespace-pre-line leading-relaxed' : 'leading-relaxed'}`}>
                    {isArray ? (
                      <div class="space-y-1">
                        {cellValue.map((item, index) => (
                          <div class="flex items-start gap-2">
                            <span class="w-1.5 h-1.5 bg-blue-400 rounded-full mt-2 flex-shrink-0"></span>
                            <span class="text-gray-700">{item}</span>
                          </div>
                        ))}
                      </div>
                    ) : (
                      <span class="text-gray-700">{cellValue}</span>
                    )}
                  </td>
                );
              })}
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  </div>
</div>
